<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bits </identifier>
  <symbol> / </symbol>
  <identifier> stdc </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> fcntl </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> unistd </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> vi </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> vs </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> complex </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> pnt </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pii </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> RA </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> FE </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> auto </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SZ </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> template </identifier>
  <symbol> &lt; </symbol>
  <keyword> class </keyword>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <identifier> splitstr </identifier>
  <symbol> ( </symbol>
  <identifier> const </identifier>
  <identifier> string </identifier>
  <symbol> &amp; </symbol>
  <identifier> s </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> istringstream </identifier>
  <identifier> in </identifier>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <identifier> out </identifier>
  <symbol> ; </symbol>
  <identifier> copy </identifier>
  <symbol> ( </symbol>
  <identifier> istream_iterator </identifier>
  <symbol> &lt; </symbol>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <symbol> ( </symbol>
  <identifier> in </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> istream_iterator </identifier>
  <symbol> &lt; </symbol>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> back_inserter </identifier>
  <symbol> ( </symbol>
  <identifier> out </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> out </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> template </identifier>
  <symbol> &lt; </symbol>
  <keyword> class </keyword>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <identifier> T </identifier>
  <identifier> gcd </identifier>
  <symbol> ( </symbol>
  <identifier> T </identifier>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> b </identifier>
  <identifier> ? </identifier>
  <identifier> gcd </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <identifier> % </identifier>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> : </identifier>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> static </keyword>
  <keyword> void </keyword>
  <identifier> redirect </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> argc </identifier>
  <symbol> , </symbol>
  <identifier> const </identifier>
  <keyword> char </keyword>
  <symbol> * </symbol>
  <symbol> * </symbol>
  <identifier> argv </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> argc </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> fd </identifier>
  <symbol> = </symbol>
  <identifier> open </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> O_RDONLY </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> dup2 </identifier>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> close </identifier>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> argc </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> fd </identifier>
  <symbol> = </symbol>
  <identifier> open </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> O_WRONLY </identifier>
  <symbol> | </symbol>
  <identifier> O_CREAT </identifier>
  <symbol> , </symbol>
  <integerConstant> 0666 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> dup2 </identifier>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> close </identifier>
  <symbol> ( </symbol>
  <identifier> fd </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> perror </identifier>
  <symbol> ( </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> exit </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> ios::sync_with_stdio </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> . </symbol>
  <identifier> exceptions </identifier>
  <symbol> ( </symbol>
  <identifier> ios::failbit </identifier>
  <symbol> | </symbol>
  <identifier> ios::badbit </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> ptable </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 6 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> argc </identifier>
  <symbol> , </symbol>
  <identifier> const </identifier>
  <keyword> char </keyword>
  <symbol> * </symbol>
  <symbol> * </symbol>
  <identifier> argv </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> redirect </identifier>
  <symbol> ( </symbol>
  <identifier> argc </identifier>
  <symbol> , </symbol>
  <identifier> argv </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ptable </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ptable </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <identifier> ^ </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ptable </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <identifier> ^ </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ptable </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> cases </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> cases </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> cas </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> cas </identifier>
  <symbol> &lt; </symbol>
  <identifier> cases </identifier>
  <symbol> ; </symbol>
  <identifier> cas </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> word </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> L </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> X </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> word </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 36 </integerConstant>
  <symbol> ) </symbol>
  <identifier> X </identifier>
  <symbol> = </symbol>
  <identifier> X </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 32 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> need </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> tcur </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> ll </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <identifier> : </identifier>
  <identifier> word </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> idx </identifier>
  <symbol> = </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> h </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> cur </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> idx </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> tcur </identifier>
  <symbol> = </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> tcur </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> idx </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> need </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> need </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> bool </identifier>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> need </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> tcur </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> cas </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> :  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <identifier> ? </identifier>
  <stringConstant> YES </stringConstant>
  <identifier> : </identifier>
  <stringConstant> NO </stringConstant>
  <symbol> ) </symbol>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> \n </stringConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
