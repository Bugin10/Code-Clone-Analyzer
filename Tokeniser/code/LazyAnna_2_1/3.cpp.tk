<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iomanip </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> struct </identifier>
  <identifier> Foo </identifier>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> q1 </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> q2 </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> Foo </identifier>
  <identifier> mult </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x1 </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> x2 </identifier>
  <symbol> , </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> Foo </identifier>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> = </symbol>
  <identifier> x1 </identifier>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> = </symbol>
  <identifier> x2 </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <identifier> % </identifier>
  <integerConstant> 2 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> = </symbol>
  <identifier> x1 </identifier>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> = </symbol>
  <identifier> x2 </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> w </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> / </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> Foo </identifier>
  <identifier> sub </identifier>
  <symbol> = </symbol>
  <identifier> mult </identifier>
  <symbol> ( </symbol>
  <identifier> x1 </identifier>
  <symbol> , </symbol>
  <identifier> x2 </identifier>
  <symbol> , </symbol>
  <identifier> w </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> + </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> + </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q2 </identifier>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> sub </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> q1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> tests </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> tests </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> str </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> tests </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> l </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> str </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> . </symbol>
  <identifier> length </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : NO </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> string </identifier>
  <identifier> str1 </identifier>
  <symbol> = </symbol>
  <identifier> str </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> str </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> str1 </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> count </identifier>
  <symbol> = </symbol>
  <identifier> str </identifier>
  <symbol> . </symbol>
  <identifier> length </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> x1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> x2 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> str </identifier>
  <symbol> . </symbol>
  <identifier> length </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> x2 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> x1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> x2 </identifier>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> x1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x1 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <identifier> x2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> count </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> y1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> y2 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> tr </identifier>
  <symbol> . </symbol>
  <identifier> length </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> y2 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> y1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> x2 </identifier>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> y1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> y1 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> y1 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <identifier> y2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> count </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> . </symbol>
  <identifier> length </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> x1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> x2 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier>   </identifier>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : YES </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : NO </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> x1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> x2 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <identifier> a </identifier>
  <symbol> &apos; </symbol>
  <symbol> - </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier>   </identifier>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : YES </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : NO </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
