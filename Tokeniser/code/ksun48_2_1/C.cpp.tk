<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdlib </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cassert </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> LL </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> m </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> a1 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> / </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> b1 </identifier>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> / </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <identifier> b%4 </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a1 </identifier>
  <symbol> + </symbol>
  <identifier> b1 </identifier>
  <symbol> ) </symbol>
  <identifier> %2 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <identifier> a2 </identifier>
  <symbol> + </symbol>
  <identifier> b2 </identifier>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> b2 </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> b2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> * </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 6 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %8 </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FILE </identifier>
  <symbol> * </symbol>
  <identifier> fin </identifier>
  <symbol> = </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C-large.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> , </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <identifier> fin! </identifier>
  <symbol> = </symbol>
</tokens>
