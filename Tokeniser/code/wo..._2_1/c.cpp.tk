<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cassert </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> a^ </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <identifier> a^ </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> table </identifier>
  <symbol> [ </symbol>
  <identifier> x </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> y </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> res </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> res </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> ch </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ch </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ch </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> all </identifier>
  <symbol> = </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> all </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> all </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <identifier> X%2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> all! </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> all! </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <identifier> X%4! </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> m1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> m2 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> coe </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> , </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> coe </identifier>
  <symbol> , </symbol>
  <identifier> left </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> m1 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> * </symbol>
  <identifier> L </identifier>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> goto </identifier>
  <identifier> ed </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> coe </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> coe </identifier>
  <symbol> , </symbol>
  <identifier> all </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> ed: </identifier>
  <symbol> ; </symbol>
  <identifier> coe </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> , </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> right </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> coe </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> m2 </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> * </symbol>
  <identifier> L </identifier>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> L </identifier>
  <symbol> - </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> goto </identifier>
  <identifier> ed2 </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> coe </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> all </identifier>
  <symbol> , </symbol>
  <identifier> coe </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> ed2: </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> m1 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> m2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> tlen </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <symbol> ) </symbol>
  <identifier> X </identifier>
  <symbol> * </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tlen </identifier>
  <symbol> &gt; </symbol>
  <identifier> m1 </identifier>
  <symbol> + </symbol>
  <identifier> m2 </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> datano </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> datano </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> datano </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%lld </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> L </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <identifier> ch </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> flg </identifier>
  <symbol> = </symbol>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> flg </identifier>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: YES\n </stringConstant>
  <symbol> , </symbol>
  <identifier> datano </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> datano </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
