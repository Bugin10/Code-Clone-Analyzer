<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> fstream </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> aud </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <identifier> stream </identifier>
  <identifier> fin </identifier>
  <symbol> ( </symbol>
  <stringConstant> A-large.in </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> ofstream </identifier>
  <identifier> fout </identifier>
  <symbol> ( </symbol>
  <stringConstant> A-large.txt </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> h </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> h </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> h </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> aud </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> running </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> cnt </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> running </identifier>
  <symbol> &lt; </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cnt </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <identifier> running </identifier>
  <symbol> ; </symbol>
  <identifier> running </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> running </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> aud </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> fout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> h </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> :  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> cnt </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
