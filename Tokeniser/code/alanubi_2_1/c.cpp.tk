<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> maxl </identifier>
  <symbol> = </symbol>
  <integerConstant> 10000 </integerConstant>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> maxl </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> { </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_I_NEG </identifier>
  <symbol> = </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_J_NEG </identifier>
  <symbol> = </symbol>
  <integerConstant> 6 </integerConstant>
  <symbol> , </symbol>
  <identifier> QUAT_K_NEG </identifier>
  <symbol> = </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> , </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> quat_letter </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <identifier> : </identifier>
  <keyword> return </keyword>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <identifier> : </identifier>
  <keyword> return </keyword>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <identifier> : </identifier>
  <keyword> return </keyword>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <identifier> : </identifier>
  <keyword> return </keyword>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> quat_rmul </identifier>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> , </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> bool </identifier>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J_NEG </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> neg </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 8 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> quat_lmul </identifier>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> , </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> bool </identifier>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J_NEG </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <identifier> switch </identifier>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_1: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_I: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_J </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_J: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_I_NEG </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> case </identifier>
  <identifier> QUAT_K: </identifier>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> neg </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !neg </identifier>
  <symbol> ; </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <symbol> * </symbol>
  <identifier> q </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 8 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> bool </identifier>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %i%lli%s </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> str </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> total </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> y </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> quat_rmul </identifier>
  <symbol> ( </symbol>
  <symbol> &amp; </symbol>
  <identifier> total </identifier>
  <symbol> , </symbol>
  <identifier> quat_letter </identifier>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> QUAT_1_NEG </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> total </identifier>
  <symbol> ) </symbol>
  <identifier> goto </identifier>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> a: </identifier>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> left </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> left_pos </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> left_pos </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ; </symbol>
  <identifier> quat_rmul </identifier>
  <symbol> ( </symbol>
  <symbol> &amp; </symbol>
  <identifier> left </identifier>
  <symbol> , </symbol>
  <identifier> quat_letter </identifier>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> QUAT_I </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> left </identifier>
  <symbol> ) </symbol>
  <identifier> goto </identifier>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> b: </identifier>
  <identifier> enum </identifier>
  <identifier> quat </identifier>
  <identifier> right </identifier>
  <symbol> = </symbol>
  <identifier> QUAT_1 </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> right_pos </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> right_pos </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ; </symbol>
  <identifier> quat_lmul </identifier>
  <symbol> ( </symbol>
  <symbol> &amp; </symbol>
  <identifier> right </identifier>
  <symbol> , </symbol>
  <identifier> quat_letter </identifier>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <identifier> j </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> QUAT_K </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> right </identifier>
  <symbol> ) </symbol>
  <identifier> goto </identifier>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> c: </identifier>
  <keyword> return </keyword>
  <identifier> left_pos </identifier>
  <symbol> + </symbol>
  <identifier> right_pos </identifier>
  <symbol> &lt; </symbol>
  <identifier> l </identifier>
  <symbol> * </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %i </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%i:  </stringConstant>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> ? </identifier>
  <stringConstant> YES&quot; </stringConstant>
  <stringConstant> NO </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> \n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
