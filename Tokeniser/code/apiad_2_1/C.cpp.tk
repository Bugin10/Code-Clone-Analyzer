<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bits </identifier>
  <symbol> / </symbol>
  <identifier> stdc </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> per </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> pb </identifier>
  <identifier> push_back </identifier>
  <identifier> #define </identifier>
  <identifier> mp </identifier>
  <identifier> make_pair </identifier>
  <identifier> #define </identifier>
  <identifier> all </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SZ </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> fi </identifier>
  <identifier> first </identifier>
  <identifier> #define </identifier>
  <identifier> se </identifier>
  <identifier> second </identifier>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> VI </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> PII </identifier>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <identifier> ll </identifier>
  <identifier> mod </identifier>
  <symbol> = </symbol>
  <integerConstant> 1000000007 </integerConstant>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> powmod </identifier>
  <symbol> ( </symbol>
  <identifier> ll </identifier>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> ll </identifier>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ll </identifier>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> a% </identifier>
  <symbol> = </symbol>
  <identifier> mod </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> &amp; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> res </identifier>
  <symbol> * </symbol>
  <identifier> a%mod </identifier>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> * </symbol>
  <identifier> a%mod </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> res </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> bb </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 6 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> _ </identifier>
  <symbol> , </symbol>
  <identifier> __ </identifier>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10100 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> k </identifier>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> gao </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> pt </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> &lt; </symbol>
  <identifier> k </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> r! </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> %n </identifier>
  <symbol> ] </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> k </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> &lt; </symbol>
  <identifier> k </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> r! </identifier>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> %n </identifier>
  <symbol> ] </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> k </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> &lt; </symbol>
  <identifier> k </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <symbol> ( </symbol>
  <identifier> pt </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> %n </identifier>
  <symbol> ] </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> ) </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> bb </identifier>
  <symbol> [ </symbol>
  <identifier> i%4 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j%4 </identifier>
  <symbol> ] </symbol>
  <identifier> ^4 </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> bb </identifier>
  <symbol> [ </symbol>
  <identifier> i%4 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j%4 </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> _ </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> _ </identifier>
  <symbol> ; </symbol>
  <identifier> _ </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%I64d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> k </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> k </identifier>
  <symbol> , </symbol>
  <integerConstant> 20 </integerConstant>
  <symbol> + </symbol>
  <identifier> k%4 </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <identifier> s </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> t </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %s\n </stringConstant>
  <symbol> , </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> __ </identifier>
  <symbol> , </symbol>
  <identifier> gao </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> ?&quot;YES&quot;:&quot;NO&quot; </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
