<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <keyword> function </keyword>
  <identifier> al </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> math </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bitset </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> set </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> queue </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> assert </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> sstream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> stack </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> complex </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> numeric </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> map </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> time </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <identifier> ld </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> unsigned </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ull </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> unsigned </identifier>
  <keyword> int </keyword>
  <identifier> uint </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pii </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <identifier> ll </identifier>
  <symbol> &gt; </symbol>
  <identifier> pil </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <identifier> ull </identifier>
  <symbol> &gt; </symbol>
  <identifier> piu </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> ll </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pli </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> ll </identifier>
  <symbol> , </symbol>
  <identifier> ll </identifier>
  <symbol> &gt; </symbol>
  <identifier> pll </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> pii </identifier>
  <symbol> , </symbol>
  <identifier> ll </identifier>
  <symbol> &gt; </symbol>
  <identifier> ppl </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> ll </identifier>
  <symbol> , </symbol>
  <identifier> pii </identifier>
  <symbol> &gt; </symbol>
  <identifier> plp </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <identifier> pii </identifier>
  <symbol> &gt; </symbol>
  <identifier> pip </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> pii </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> ppi </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> pii </identifier>
  <symbol> , </symbol>
  <identifier> pii </identifier>
  <symbol> &gt; </symbol>
  <identifier> ppp </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pdi </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> pid </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> , </symbol>
  <identifier> pii </identifier>
  <symbol> &gt; </symbol>
  <identifier> pdp </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> , </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> pdd </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <identifier> pdd </identifier>
  <symbol> , </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> pd3 </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> vec </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> vec </identifier>
  <symbol> &gt; </symbol>
  <identifier> mat </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> repn </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ALL </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> pb </identifier>
  <identifier> push_back </identifier>
  <identifier> #define </identifier>
  <identifier> SORT </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> sort </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SORTN </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> sort </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ERASE </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> erase </identifier>
  <symbol> ( </symbol>
  <identifier> unique </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> COUNT </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> REMOVE </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> erase </identifier>
  <symbol> ( </symbol>
  <identifier> remove </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> REVERSE </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> reverse </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> FORIT </identifier>
  <symbol> ( </symbol>
  <identifier> it </identifier>
  <symbol> , </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> __typeof </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> it </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> it! </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> it </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> LB </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> lower_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> lb </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> lower_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> LBN </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> lower_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> lbN </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> lower_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> UB </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> upper_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ub </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> upper_bound </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> BS </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> binary_search </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> BS2 </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> binary_search </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> NB </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> ~ </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> | </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> - </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> NP </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> next_permutation </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> MM </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> ) </symbol>
  <identifier> memset </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> sizeof </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SQ </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SC </identifier>
  <symbol> ( </symbol>
  <identifier> c1 </identifier>
  <symbol> , </symbol>
  <identifier> c2 </identifier>
  <symbol> ) </symbol>
  <identifier> strcmp </identifier>
  <symbol> ( </symbol>
  <identifier> c1 </identifier>
  <symbol> , </symbol>
  <identifier> c2 </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <identifier> #define </identifier>
  <identifier> mp </identifier>
  <identifier> make_pair </identifier>
  <identifier> #define </identifier>
  <identifier> INF </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <integerConstant> 29 </integerConstant>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> INFL </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1LL </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <integerConstant> 61 </integerConstant>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> fi </identifier>
  <identifier> first </identifier>
  <identifier> #define </identifier>
  <identifier> se </identifier>
  <identifier> second </identifier>
  <identifier> #define </identifier>
  <identifier> MOD </identifier>
  <integerConstant> 1000000009 </integerConstant>
  <identifier> #define </identifier>
  <identifier> EPS </identifier>
  <integerConstant> 1e </integerConstant>
  <symbol> - </symbol>
  <integerConstant> 9 </integerConstant>
  <identifier> #define </identifier>
  <identifier> MIN </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> MAX </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> max </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> madd </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> %MOD </identifier>
  <identifier> #define </identifier>
  <identifier> msub </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <identifier> MOD </identifier>
  <symbol> - </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> %MOD </identifier>
  <identifier> #define </identifier>
  <identifier> OUTPUT </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%c </stringConstant>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> ? </identifier>
  <symbol> &apos; </symbol>
  <identifier> \n </identifier>
  <symbol> &apos; </symbol>
  <identifier> : </identifier>
  <symbol> &apos; </symbol>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> P </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1000 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> repn </identifier>
  <symbol> ( </symbol>
  <identifier> __ </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> INF </identifier>
  <symbol> ; </symbol>
  <identifier> canf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> N </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> ) </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> P </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> epn </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1001 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> rr </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> ) </symbol>
  <identifier> rr </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> P </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> IN </identifier>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> , </symbol>
  <identifier> rr </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> rintf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> __ </identifier>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
