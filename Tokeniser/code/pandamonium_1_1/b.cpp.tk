<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> d </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 1000000 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> - </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <identifier> b </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> / </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> m </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> memset </identifier>
  <symbol> ( </symbol>
  <identifier> m </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> sizeof </identifier>
  <symbol> ( </symbol>
  <identifier> m </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> c </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <identifier> c </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> mp </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> x </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> mp </identifier>
  <symbol> = </symbol>
  <identifier> max </identifier>
  <symbol> ( </symbol>
  <identifier> mp </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> x </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> mp </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <identifier> mp </identifier>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> cnt </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> z </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> z </identifier>
  <symbol> &lt; </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <identifier> z </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cnt </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> z </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> cnt </identifier>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
