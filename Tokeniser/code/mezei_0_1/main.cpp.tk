<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> stdio </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FILE </identifier>
  <symbol> * </symbol>
  <identifier> reader </identifier>
  <symbol> = </symbol>
  <identifier> fopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> A-large.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> S_max </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1010 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> S_max </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %c </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> S_max </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %c </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> standing </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> friends </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> S_max </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> standing </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> standing </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <identifier> friends </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <identifier> standing </identifier>
  <symbol> ; </symbol>
  <identifier> standing </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> friends </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
