<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdlib </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cmath </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> map </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> set </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> queue </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> combien </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> SMax </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> total </identifier>
  <symbol> , </symbol>
  <identifier> encours </identifier>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d\n </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fprintf </identifier>
  <symbol> ( </symbol>
  <identifier> stderr </identifier>
  <symbol> , </symbol>
  <stringConstant> Cas %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d:  </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> SMax </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> SMax </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %c </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> combien </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> \n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> encours </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> ajoute </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> SMax </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> encours </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> combien </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> encours </identifier>
  <symbol> &lt; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ajoute </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> - </symbol>
  <identifier> encours </identifier>
  <symbol> ; </symbol>
  <identifier> encours </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> ajoute </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
