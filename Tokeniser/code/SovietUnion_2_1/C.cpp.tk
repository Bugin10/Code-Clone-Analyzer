<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> class </keyword>
  <identifier> Q </identifier>
  <symbol> { </symbol>
  <identifier> public: </identifier>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <identifier> Q </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> void </keyword>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <identifier> Q </identifier>
  <identifier> operator </identifier>
  <symbol> * </symbol>
  <symbol> ( </symbol>
  <identifier> const </identifier>
  <identifier> Q </identifier>
  <symbol> &amp; </symbol>
  <identifier> rhs </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> Q </identifier>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> flag </identifier>
  <identifier> ^ </identifier>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> rhs </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <identifier> !ans </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> N </identifier>
  <symbol> = </symbol>
  <integerConstant> 11000 </integerConstant>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> T </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> Q </identifier>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> N </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> , </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C.out </stringConstant>
  <symbol> , </symbol>
  <stringConstant> w </stringConstant>
  <symbol> , </symbol>
  <identifier> stdout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> Ti </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> Ti </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> Ti </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> n </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> s </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> mul </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> mul </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> * </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> Q </identifier>
  <identifier> tmp </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> nx </identifier>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> nx </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> tmp </identifier>
  <symbol> = </symbol>
  <identifier> tmp </identifier>
  <symbol> * </symbol>
  <identifier> mul </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> Ti </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : NO\n </stringConstant>
  <symbol> ; </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 100 </integerConstant>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 100 </integerConstant>
  <symbol> ; </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> min </identifier>
  <symbol> = </symbol>
  <integerConstant> 1000000000000000ll </integerConstant>
  <symbol> , </symbol>
  <identifier> max </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> tmp </identifier>
  <symbol> = </symbol>
  <identifier> tmp </identifier>
  <symbol> * </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> min </identifier>
  <symbol> ) </symbol>
  <identifier> min </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> &gt; </symbol>
  <identifier> max </identifier>
  <symbol> ) </symbol>
  <identifier> max </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> min </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 1000000000000000ll </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> max </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> min </identifier>
  <symbol> &lt; </symbol>
  <identifier> max </identifier>
  <symbol> ) </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> Ti </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : YES\n </stringConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> Ti </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> : NO\n </stringConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
