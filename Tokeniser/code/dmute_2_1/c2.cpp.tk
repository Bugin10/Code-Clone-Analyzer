<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdlib </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> utility </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> maxn </identifier>
  <symbol> = </symbol>
  <integerConstant> 10005 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 9 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 9 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> maxn </identifier>
  <symbol> * </symbol>
  <integerConstant> 18 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> void </keyword>
  <identifier> prep </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> memset </identifier>
  <symbol> ( </symbol>
  <identifier> mat </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> sizeof </identifier>
  <identifier> mat </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 8 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> j </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ^ </identifier>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <identifier> ^ </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> num </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> go </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> st </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> goal </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> st </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> st </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <identifier> cur </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> num </identifier>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> goal </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> calc </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> r </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> cur </identifier>
  <symbol> = </symbol>
  <identifier> mat </identifier>
  <symbol> [ </symbol>
  <identifier> cur </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> num </identifier>
  <symbol> ( </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> cur </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> cnt </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> tst </identifier>
  <symbol> ; </symbol>
  <identifier> prep </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> tst </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> tst </identifier>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%lld </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> cnt </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <identifier> str </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> len </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> len </identifier>
  <symbol> = </symbol>
  <integerConstant> 12 </integerConstant>
  <symbol> ; </symbol>
  <symbol> ; </symbol>
  <identifier> len </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> len </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> cnt </identifier>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> cnt </identifier>
  <symbol> &lt; </symbol>
  <identifier> len </identifier>
  <symbol> ) </symbol>
  <identifier> len </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <identifier> cnt </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> len </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> str </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> n </identifier>
  <symbol> = </symbol>
  <identifier> len </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> md1 </identifier>
  <symbol> = </symbol>
  <identifier> go </identifier>
  <symbol> ( </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> md1 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> md1 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> nt </identifier>
  <identifier> md2 </identifier>
  <symbol> = </symbol>
  <identifier> go </identifier>
  <symbol> ( </symbol>
  <identifier> md1 </identifier>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> md2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> md2 </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> calc </identifier>
  <symbol> ( </symbol>
  <identifier> md2 </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: YES\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
