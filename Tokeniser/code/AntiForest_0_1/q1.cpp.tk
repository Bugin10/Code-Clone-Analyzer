<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bits </identifier>
  <symbol> / </symbol>
  <identifier> stdc </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #define </identifier>
  <identifier> INF </identifier>
  <integerConstant> 1000000010 </integerConstant>
  <identifier> #define </identifier>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> mp </identifier>
  <identifier> make_pair </identifier>
  <identifier> #define </identifier>
  <identifier> fi </identifier>
  <identifier> first </identifier>
  <identifier> #define </identifier>
  <identifier> se </identifier>
  <identifier> second </identifier>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pii </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> inp </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> sCoun </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1005 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> q1.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> , </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> q1.out </stringConstant>
  <symbol> , </symbol>
  <stringConstant> w </stringConstant>
  <symbol> , </symbol>
  <identifier> stdout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> _z </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d:  </stringConstant>
  <symbol> , </symbol>
  <identifier> _z </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant>  %d %s  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> N </identifier>
  <symbol> , </symbol>
  <identifier> inp </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> sCoun </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> inp </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> soFar </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> soFar </identifier>
  <symbol> &lt; </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ans </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <identifier> soFar </identifier>
  <symbol> ; </symbol>
  <identifier> soFar </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> soFar </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> sCoun </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
