<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> fstream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <keyword> function </keyword>
  <identifier> al </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cmath </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdint </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> void </keyword>
  <identifier> solve_case </identifier>
  <symbol> ( </symbol>
  <keyword> if </keyword>
  <identifier> stream </identifier>
  <symbol> &amp; </symbol>
  <identifier> fin </identifier>
  <symbol> , </symbol>
  <identifier> ofstream </identifier>
  <symbol> &amp; </symbol>
  <identifier> fout </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> case_num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> d </identifier>
  <symbol> , </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> INT_MAX </identifier>
  <symbol> ; </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> d </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> sort </identifier>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> + </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> dp </identifier>
  <symbol> ( </symbol>
  <identifier> d </identifier>
  <symbol> , </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> d </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> d </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> dp </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> m </identifier>
  <symbol> = </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> k </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> k </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> j </identifier>
  <symbol> ; </symbol>
  <identifier> k </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> m </identifier>
  <symbol> , </symbol>
  <identifier> max </identifier>
  <symbol> ( </symbol>
  <identifier> dp </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> - </symbol>
  <identifier> k </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> + </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <symbol> ( </symbol>
  <identifier> k </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> dp </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> , </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <identifier> dp </identifier>
  <symbol> [ </symbol>
  <identifier> d </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> fout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> case_num </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> :  </stringConstant>
  <symbol> ; </symbol>
  <identifier> fout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> r </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> argc </identifier>
  <symbol> , </symbol>
  <keyword> char </keyword>
  <identifier> const </identifier>
  <symbol> * </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> argc </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> name </identifier>
  <symbol> [ </symbol>
  <integerConstant> 256 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> strcpy </identifier>
  <symbol> ( </symbol>
  <identifier> name </identifier>
  <symbol> , </symbol>
  <identifier> argv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <identifier> stream </identifier>
  <identifier> fin </identifier>
  <symbol> ( </symbol>
  <identifier> name </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> name </identifier>
  <symbol> [ </symbol>
  <identifier> strlen </identifier>
  <symbol> ( </symbol>
  <identifier> name </identifier>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> strcat </identifier>
  <symbol> ( </symbol>
  <identifier> name </identifier>
  <symbol> , </symbol>
  <stringConstant> out </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> ofstream </identifier>
  <identifier> fout </identifier>
  <symbol> ( </symbol>
  <identifier> name </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> !fin </identifier>
  <symbol> . </symbol>
  <identifier> is_open </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> !fout </identifier>
  <symbol> . </symbol>
  <identifier> is_open </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> t1 </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> fin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> t </identifier>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> t1 </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> &lt; </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> cerr </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Solving case  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> t1 </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <identifier> solve_case </identifier>
  <symbol> ( </symbol>
  <identifier> fin </identifier>
  <symbol> , </symbol>
  <identifier> fout </identifier>
  <symbol> , </symbol>
  <identifier> t1 </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
