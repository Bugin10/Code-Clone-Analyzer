<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bits </identifier>
  <symbol> / </symbol>
  <identifier> stdc </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #define </identifier>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> sz </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <keyword> int </keyword>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> O </identifier>
  <integerConstant> 1 </integerConstant>
  <identifier> #define </identifier>
  <identifier> I </identifier>
  <integerConstant> 2 </integerConstant>
  <identifier> #define </identifier>
  <identifier> J </identifier>
  <integerConstant> 3 </integerConstant>
  <identifier> #define </identifier>
  <identifier> K </identifier>
  <integerConstant> 4 </integerConstant>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> K </identifier>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> J </identifier>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> I </identifier>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> C </identifier>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <stringConstant> ijk </stringConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> V </identifier>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> K </identifier>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> toi </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> ch </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> C </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> ch </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> V </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> s </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> s </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> s </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> s </identifier>
  <symbol> * </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> pw </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> ll </identifier>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> &amp; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> / </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> r </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> ldiv </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> rdiv </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <keyword> false </keyword>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> Z </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %lld </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> char </keyword>
  <symbol> &gt; </symbol>
  <identifier> s </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> v </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <identifier> v </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> toi </identifier>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pref </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> suff </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> v </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> map </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> fpref </identifier>
  <symbol> , </symbol>
  <identifier> fsuff </identifier>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> !fpref </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fpref </identifier>
  <symbol> [ </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> !fsuff </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fsuff </identifier>
  <symbol> [ </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> char </keyword>
  <identifier> ans </identifier>
  <symbol> [ </symbol>
  <integerConstant> 50 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> sprintf </identifier>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> , </symbol>
  <stringConstant> Case #%d:  </stringConstant>
  <symbol> , </symbol>
  <identifier> Z </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> pw </identifier>
  <symbol> ( </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> strcat </identifier>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> , </symbol>
  <stringConstant> NO </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <identifier> ll </identifier>
  <identifier> spref </identifier>
  <symbol> = </symbol>
  <integerConstant> 1e17 </integerConstant>
  <symbol> ; </symbol>
  <identifier> set </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> seen </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> seen </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> seen </identifier>
  <symbol> . </symbol>
  <identifier> insert </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> fpref </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> rdiv </identifier>
  <symbol> ( </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> spref </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <identifier> fpref </identifier>
  <symbol> [ </symbol>
  <identifier> rdiv </identifier>
  <symbol> ( </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <identifier> pref </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> ll </identifier>
  <identifier> ssuf </identifier>
  <symbol> = </symbol>
  <integerConstant> 1e17 </integerConstant>
  <symbol> ; </symbol>
  <identifier> seen </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> FO </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> seen </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <identifier> seen </identifier>
  <symbol> . </symbol>
  <identifier> insert </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> fsuff </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <identifier> ldiv </identifier>
  <symbol> ( </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ssuf </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <identifier> fsuff </identifier>
  <symbol> [ </symbol>
  <identifier> ldiv </identifier>
  <symbol> ( </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> mul </identifier>
  <symbol> ( </symbol>
  <identifier> suff </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> spref </identifier>
  <symbol> + </symbol>
  <identifier> ssuf </identifier>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> * </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> strcat </identifier>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> , </symbol>
  <stringConstant> YES </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <identifier> strcat </identifier>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> , </symbol>
  <stringConstant> NO </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s\n </stringConstant>
  <symbol> , </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
</tokens>
