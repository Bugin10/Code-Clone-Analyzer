<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bitset </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cmath </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> complex </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> map </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> queue </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> set </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> stack </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> #define </identifier>
  <identifier> repi </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> repi </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> repd </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> repit </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> __typeof </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> reprit </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> __typeof </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> rbegin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> rbegin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> rend </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> all </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> rall </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> rbegin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> rend </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> UNIQUE </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> erase </identifier>
  <symbol> ( </symbol>
  <identifier> unique </identifier>
  <symbol> ( </symbol>
  <identifier> all </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> pb </identifier>
  <identifier> push_back </identifier>
  <identifier> #define </identifier>
  <identifier> mp </identifier>
  <identifier> make_pair </identifier>
  <identifier> #define </identifier>
  <identifier> PI </identifier>
  <identifier> acos </identifier>
  <symbol> ( </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> . </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> to_str </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> #v </identifier>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <identifier> struct </identifier>
  <identifier> quart </identifier>
  <symbol> { </symbol>
  <keyword> char </keyword>
  <identifier> type </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> sign </identifier>
  <symbol> ; </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> type </identifier>
  <symbol> ) </symbol>
  <identifier> : </identifier>
  <identifier> type </identifier>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> sign </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> type </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <identifier> : </identifier>
  <identifier> type </identifier>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> ( </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> } </symbol>
  <identifier> quart </identifier>
  <identifier> right </identifier>
  <symbol> ( </symbol>
  <identifier> quart </identifier>
  <identifier> o </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> cerr </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> error! </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> quart </identifier>
  <identifier> left </identifier>
  <symbol> ( </symbol>
  <identifier> quart </identifier>
  <identifier> o </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <identifier> sign </identifier>
  <symbol> * </symbol>
  <identifier> o </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> cerr </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> error! </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> _ </identifier>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> bool </identifier>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> l </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> ori </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> ori </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <integerConstant> 6LL </integerConstant>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> s </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> ori </identifier>
  <symbol> ; </symbol>
  <identifier> uart </identifier>
  <identifier> unit_val </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> ori </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> unit_val </identifier>
  <symbol> = </symbol>
  <identifier> unit_val </identifier>
  <symbol> . </symbol>
  <identifier> right </identifier>
  <symbol> ( </symbol>
  <identifier> ori </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> quart </identifier>
  <identifier> val </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> x%4 </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> right </identifier>
  <symbol> ( </symbol>
  <identifier> unit_val </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier>   </identifier>
  <identifier> l </identifier>
  <identifier> i_pos </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> rep </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> s </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> right </identifier>
  <symbol> ( </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> i_pos </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> i_pos </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> k_pos </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> repd </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <identifier> s </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> left </identifier>
  <symbol> ( </symbol>
  <identifier> quart </identifier>
  <symbol> ( </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> type </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> val </identifier>
  <symbol> . </symbol>
  <identifier> sign </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> k_pos </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> k_pos </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> rk_pos </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> ll </identifier>
  <symbol> ) </symbol>
  <identifier> s </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> - </symbol>
  <identifier> k_pos </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> i_pos </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <identifier> x </identifier>
  <symbol> * </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <identifier> rk_pos </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> _ </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> :  </stringConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> YES </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> NO </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
