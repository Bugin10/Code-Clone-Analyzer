<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> stdio </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #define </identifier>
  <identifier> L_MAX </identifier>
  <integerConstant> 10000 </integerConstant>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> p </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> FILE </identifier>
  <symbol> * </symbol>
  <identifier> reader </identifier>
  <symbol> = </symbol>
  <identifier> fopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C-large.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> t </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %d %lld </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> L </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> X </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> , </symbol>
  <integerConstant> 12 </integerConstant>
  <symbol> + </symbol>
  <identifier> X%4 </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> input </identifier>
  <symbol> [ </symbol>
  <integerConstant> 20 </integerConstant>
  <symbol> * </symbol>
  <identifier> L_MAX </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %c </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> fscanf </identifier>
  <symbol> ( </symbol>
  <identifier> reader </identifier>
  <symbol> , </symbol>
  <stringConstant> %c </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> input </identifier>
  <symbol> [ </symbol>
  <identifier> x </identifier>
  <symbol> * </symbol>
  <identifier> L </identifier>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> total_length </identifier>
  <symbol> = </symbol>
  <identifier> X </identifier>
  <symbol> * </symbol>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> find_i </identifier>
  <symbol> , </symbol>
  <identifier> find_j </identifier>
  <symbol> , </symbol>
  <identifier> find_k </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> find_i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> find_i </identifier>
  <symbol> &lt; </symbol>
  <identifier> total_length </identifier>
  <symbol> ; </symbol>
  <identifier> find_i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> , </symbol>
  <identifier> input </identifier>
  <symbol> [ </symbol>
  <identifier> find_i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> find_j </identifier>
  <symbol> = </symbol>
  <identifier> find_i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> find_j </identifier>
  <symbol> &lt; </symbol>
  <identifier> total_length </identifier>
  <symbol> ; </symbol>
  <identifier> find_j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> , </symbol>
  <identifier> input </identifier>
  <symbol> [ </symbol>
  <identifier> find_j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> break </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> find_k </identifier>
  <symbol> = </symbol>
  <identifier> find_j </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> find_k </identifier>
  <symbol> &lt; </symbol>
  <identifier> total_length </identifier>
  <symbol> ; </symbol>
  <identifier> find_k </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> , </symbol>
  <identifier> input </identifier>
  <symbol> [ </symbol>
  <identifier> find_k </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> val </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: YES\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Error (convert)\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> p </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> m </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> m </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> q </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> m </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> q </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> convert </identifier>
  <symbol> ( </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Error (mult)\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
