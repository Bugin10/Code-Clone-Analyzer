<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #define </identifier>
  <identifier> f </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> g </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> h </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> z </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> LL </identifier>
  <symbol> ; </symbol>
  <identifier> struct </identifier>
  <identifier> num </identifier>
  <symbol> { </symbol>
  <keyword> char </keyword>
  <identifier> ch </identifier>
  <symbol> , </symbol>
  <identifier> neg </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> num </identifier>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <integerConstant> 256 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 256 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> ONE </identifier>
  <symbol> , </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> IJK </identifier>
  <symbol> ; </symbol>
  <identifier> inline </identifier>
  <identifier> num </identifier>
  <identifier> operator </identifier>
  <symbol> * </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> num </identifier>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> num </identifier>
  <identifier> tmp </identifier>
  <symbol> = </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> ) </symbol>
  <identifier> tmp </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <identifier> !tmp </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> tmp </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <identifier> bool </identifier>
  <identifier> operator </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> num </identifier>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <identifier> bool </identifier>
  <identifier> operator </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> num </identifier>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> ch </identifier>
  <symbol> | </symbol>
  <symbol> | </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> y </identifier>
  <symbol> . </symbol>
  <identifier> neg </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> void </keyword>
  <identifier> num_init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> _mul </identifier>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> NE </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> I </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> J </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> K </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <identifier> IJK </identifier>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> * </symbol>
  <identifier> J </identifier>
  <symbol> * </symbol>
  <identifier> K </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> void </keyword>
  <identifier> read </identifier>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> &amp; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> getchar </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> getchar </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> x </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <identifier> num </identifier>
  <identifier> pow </identifier>
  <symbol> ( </symbol>
  <identifier> num </identifier>
  <identifier> x </identifier>
  <symbol> , </symbol>
  <identifier> LL </identifier>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> num </identifier>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <identifier> h </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 60 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> ans </identifier>
  <symbol> * </symbol>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> &amp; </symbol>
  <symbol> ( </symbol>
  <integerConstant> 1LL </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> ans </identifier>
  <symbol> * </symbol>
  <identifier> x </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> LL </identifier>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <identifier> num </identifier>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10007 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10007 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10007 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> num_init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> f </identifier>
  <symbol> ( </symbol>
  <identifier> _ </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%I64d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> m </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <identifier> f </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> read </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> * </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> num </identifier>
  <identifier> tmp </identifier>
  <symbol> = </symbol>
  <identifier> pow </identifier>
  <symbol> ( </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <identifier> n </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> m </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tmp </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> IJK </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> _ </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> LL </identifier>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <integerConstant> 0x1f1f1f1f1f1f1f1fLL </integerConstant>
  <symbol> ; </symbol>
  <identifier> LL </identifier>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <identifier> ans </identifier>
  <symbol> ; </symbol>
  <identifier> f </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> LL </identifier>
  <identifier> up </identifier>
  <symbol> = </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> up </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> up </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> up </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> num </identifier>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> pow </identifier>
  <symbol> ( </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <identifier> n </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> prod </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> LL </identifier>
  <identifier> ca </identifier>
  <symbol> = </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ca </identifier>
  <symbol> &lt; </symbol>
  <identifier> ans </identifier>
  <symbol> ) </symbol>
  <identifier> ans </identifier>
  <symbol> = </symbol>
  <identifier> ca </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <identifier> h </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> * </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> h </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> LL </identifier>
  <identifier> up </identifier>
  <symbol> = </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> up </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> up </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> up </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> num </identifier>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> * </symbol>
  <identifier> pow </identifier>
  <symbol> ( </symbol>
  <identifier> succ </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> LL </identifier>
  <identifier> ca </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> - </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ca </identifier>
  <symbol> &lt; </symbol>
  <identifier> a2 </identifier>
  <symbol> ) </symbol>
  <identifier> a2 </identifier>
  <symbol> = </symbol>
  <identifier> ca </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> LL </identifier>
  <identifier> tl </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> LL </identifier>
  <symbol> ) </symbol>
  <identifier> n </identifier>
  <symbol> * </symbol>
  <identifier> m </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ans </identifier>
  <symbol> + </symbol>
  <identifier> a2 </identifier>
  <symbol> &lt; </symbol>
  <identifier> tl </identifier>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: YES\n </stringConstant>
  <symbol> , </symbol>
  <identifier> _ </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> _ </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
