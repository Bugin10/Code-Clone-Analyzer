<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bits </identifier>
  <symbol> / </symbol>
  <identifier> stdc </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> ONE </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> I </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> J </identifier>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> K </identifier>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> inv </identifier>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> M </identifier>
  <symbol> ; </symbol>
  <keyword> char </keyword>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10000001 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10000001 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> B </identifier>
  <symbol> [ </symbol>
  <integerConstant> 10000001 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> set </identifier>
  <symbol> &lt; </symbol>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> dp </identifier>
  <symbol> , </symbol>
  <identifier> ndp </identifier>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> possible </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 10 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> inline </identifier>
  <keyword> int </keyword>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> int </keyword>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> int </keyword>
  <identifier> powquat </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> ret </identifier>
  <symbol> = </symbol>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <keyword> while </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> &amp; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ret </identifier>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> ret </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> / </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <identifier> ret </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> int </keyword>
  <identifier> getinv </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> y </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> ( </symbol>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> inv </identifier>
  <symbol> [ </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> y </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> inline </identifier>
  <keyword> int </keyword>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> &gt; </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> getinv </identifier>
  <symbol> ( </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> bool </identifier>
  <identifier> brute </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> M </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> N </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> N </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> M </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> N </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> dp </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> ndp </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> ndp </identifier>
  <symbol> . </symbol>
  <identifier> insert </identifier>
  <symbol> ( </symbol>
  <symbol> { </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> } </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> ndp </identifier>
  <symbol> . </symbol>
  <identifier> count </identifier>
  <symbol> ( </symbol>
  <symbol> { </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> J </identifier>
  <symbol> } </symbol>
  <symbol> ) </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <identifier> dp </identifier>
  <symbol> . </symbol>
  <identifier> insert </identifier>
  <symbol> ( </symbol>
  <symbol> { </symbol>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> } </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> auto </identifier>
  <symbol> &amp; </symbol>
  <identifier> it: </identifier>
  <identifier> ndp </identifier>
  <symbol> ) </symbol>
  <identifier> dp </identifier>
  <symbol> . </symbol>
  <identifier> insert </identifier>
  <symbol> ( </symbol>
  <symbol> { </symbol>
  <identifier> it </identifier>
  <symbol> . </symbol>
  <identifier> first </identifier>
  <symbol> , </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> it </identifier>
  <symbol> . </symbol>
  <identifier> second </identifier>
  <symbol> , </symbol>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> } </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> dp </identifier>
  <symbol> . </symbol>
  <identifier> swap </identifier>
  <symbol> ( </symbol>
  <identifier> ndp </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> dp </identifier>
  <symbol> . </symbol>
  <identifier> clear </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> bool </identifier>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> N </identifier>
  <symbol> * </symbol>
  <identifier> M </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> B </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> get </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> N </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> X </identifier>
  <symbol> = </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> N </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> target </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> M </identifier>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <identifier> %4 </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> N </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ?ONE:B </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> r </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> r </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <identifier> r?A </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <identifier> :ONE </identifier>
  <symbol> ; </symbol>
  <identifier> const </identifier>
  <keyword> int </keyword>
  <identifier> d </identifier>
  <symbol> = </symbol>
  <identifier> B </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> possible </identifier>
  <symbol> [ </symbol>
  <identifier> target </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> X </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> c </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> d </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> void </keyword>
  <identifier> _main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> #if </identifier>
  <integerConstant> 0 </integerConstant>
  <identifier> N </identifier>
  <symbol> = </symbol>
  <integerConstant> 10000 </integerConstant>
  <symbol> ; </symbol>
  <identifier> M </identifier>
  <symbol> = </symbol>
  <integerConstant> 1000000000000LL </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> i%3 </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #else </identifier>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%lld%s </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> N </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> M </identifier>
  <symbol> , </symbol>
  <identifier> S </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #endif </identifier>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <identifier> N </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> J </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> S </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> A </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> assert </identifier>
  <symbol> ( </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> M </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 70 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> brute </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> YES\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> NO\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> YES\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> NO\n </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> ONE </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> ONE </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> J </identifier>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> ONE </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> ; </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> ONE </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> I </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> J </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> J </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> I </identifier>
  <symbol> , </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> K </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <identifier> ONE </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> inv </identifier>
  <symbol> [ </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> sgn </identifier>
  <symbol> ( </symbol>
  <identifier> mul </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> * </symbol>
  <identifier> j </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> X </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> X </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> X </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> k </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> k </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> k </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> powquat </identifier>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> I </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> j </identifier>
  <symbol> , </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> powquat </identifier>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> J </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> c </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> c </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> multiply </identifier>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <identifier> powquat </identifier>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> K </identifier>
  <symbol> ) </symbol>
  <identifier> possible </identifier>
  <symbol> [ </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> + </symbol>
  <identifier> b </identifier>
  <symbol> + </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <identifier> %4 </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> X </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> k </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C-large.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> , </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C-large.out </stringConstant>
  <symbol> , </symbol>
  <stringConstant> w </stringConstant>
  <symbol> , </symbol>
  <identifier> stdout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> #if </identifier>
  <integerConstant> 0 </integerConstant>
  <identifier> T </identifier>
  <symbol> = </symbol>
  <integerConstant> 100 </integerConstant>
  <symbol> ; </symbol>
  <identifier> #else </identifier>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #endif </identifier>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d:  </stringConstant>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> _main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
