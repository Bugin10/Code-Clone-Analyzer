<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> exception </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iomanip </identifier>
  <symbol> &gt; </symbol>
  <identifier> template </identifier>
  <symbol> &lt; </symbol>
  <identifier> typename </identifier>
  <identifier> T </identifier>
  <symbol> &gt; </symbol>
  <keyword> void </keyword>
  <identifier> validate </identifier>
  <symbol> ( </symbol>
  <identifier> T </identifier>
  <identifier> parameter </identifier>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <identifier> min </identifier>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <identifier> max </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> parameter </identifier>
  <symbol> &lt; </symbol>
  <identifier> min </identifier>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> parameter </identifier>
  <symbol> &gt; </symbol>
  <identifier> max </identifier>
  <symbol> ) </symbol>
  <identifier> throw </identifier>
  <identifier> std::exception </identifier>
  <symbol> ( </symbol>
  <stringConstant> invalid parameter </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> class </keyword>
  <identifier> Problem </identifier>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <symbol> * </symbol>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> smax </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> extra </identifier>
  <symbol> ; </symbol>
  <identifier> public: </identifier>
  <identifier> Problem </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> s </identifier>
  <symbol> = </symbol>
  <keyword> null </keyword>
  <identifier> ptr </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> ~ </symbol>
  <identifier> Problem </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <keyword> null </keyword>
  <identifier> ptr </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <identifier> s </identifier>
  <symbol> ) </symbol>
  <identifier> delete </identifier>
  <symbol> [ </symbol>
  <symbol> ] </symbol>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> void </keyword>
  <identifier> read </identifier>
  <symbol> ( </symbol>
  <identifier> std::istream </identifier>
  <symbol> &amp; </symbol>
  <identifier> in </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> in </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> smax </identifier>
  <symbol> ; </symbol>
  <identifier> s </identifier>
  <symbol> = </symbol>
  <identifier> new </identifier>
  <keyword> int </keyword>
  <symbol> [ </symbol>
  <identifier> smax </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> smax </identifier>
  <symbol> ; </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> in </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 9 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> c </identifier>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> void </keyword>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> extra </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> total </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> smax </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> delta_extra </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> total </identifier>
  <symbol> &lt; </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> ? </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <identifier> total </identifier>
  <symbol> ) </symbol>
  <identifier> : </identifier>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> total </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> total </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> delta_extra </identifier>
  <symbol> ; </symbol>
  <identifier> extra </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> delta_extra </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> void </keyword>
  <identifier> print </identifier>
  <symbol> ( </symbol>
  <identifier> std::ostream </identifier>
  <symbol> &amp; </symbol>
  <identifier> out </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> out </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> extra </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> std::endl </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> argc </identifier>
  <symbol> , </symbol>
  <keyword> char </keyword>
  <symbol> * </symbol>
  <symbol> * </symbol>
  <identifier> argv </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> try </identifier>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> std::cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> validate </identifier>
  <symbol> ( </symbol>
  <identifier> T </identifier>
  <symbol> , </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 100 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> std::cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> std::setprecision </identifier>
  <symbol> ( </symbol>
  <integerConstant> 7 </integerConstant>
  <symbol> ) </symbol>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> std::fixed </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> iT </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> iT </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> iT </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> Problem </identifier>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <identifier> p </identifier>
  <symbol> . </symbol>
  <identifier> read </identifier>
  <symbol> ( </symbol>
  <identifier> std::cin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> p </identifier>
  <symbol> . </symbol>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> std::cout </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> Case # </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> iT </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> :  </stringConstant>
  <symbol> ; </symbol>
  <identifier> p </identifier>
  <symbol> . </symbol>
  <identifier> print </identifier>
  <symbol> ( </symbol>
  <identifier> std::cout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <identifier> catch </identifier>
  <symbol> ( </symbol>
  <identifier> std::exception </identifier>
  <symbol> &amp; </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> std::cerr </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> something went wrong:  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> what </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
