<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> stdio </identifier>
  <symbol> . </symbol>
  <identifier> h </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> ll </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> INF </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1ll </integerConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <integerConstant> 60 </integerConstant>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> MAXN </identifier>
  <integerConstant> 10005 </integerConstant>
  <keyword> char </keyword>
  <identifier> ch </identifier>
  <symbol> [ </symbol>
  <identifier> MAXN </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> MAXN </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> MAXN </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> MAXN </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> cas </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> ll </identifier>
  <identifier> m </identifier>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> , </symbol>
  <identifier> r </identifier>
  <symbol> , </symbol>
  <identifier> lc </identifier>
  <symbol> , </symbol>
  <identifier> rc </identifier>
  <symbol> ; </symbol>
  <identifier> bool </identifier>
  <identifier> flag </identifier>
  <symbol> ; </symbol>
  <keyword> void </keyword>
  <identifier> init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> * </symbol>
  <identifier> b </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <identifier> ? </identifier>
  <integerConstant> 1 </integerConstant>
  <identifier> : </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> = </symbol>
  <identifier> abs </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> res </identifier>
  <symbol> * </symbol>
  <symbol> = </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <identifier> a </identifier>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> b </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> res </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <keyword> char </keyword>
  <integerConstant> 2int </integerConstant>
  <symbol> ( </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 2 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 3 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> k </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <keyword> return </keyword>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C.in </stringConstant>
  <symbol> , </symbol>
  <stringConstant> r </stringConstant>
  <symbol> , </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> freopen </identifier>
  <symbol> ( </symbol>
  <stringConstant> C.out </stringConstant>
  <symbol> , </symbol>
  <stringConstant> w </stringConstant>
  <symbol> , </symbol>
  <identifier> stdout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> init </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> cas </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> T </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> cas </identifier>
  <symbol> ; </symbol>
  <identifier> T </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d%lld </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> n </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> m </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %s </stringConstant>
  <symbol> , </symbol>
  <identifier> ch </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <keyword> char </keyword>
  <integerConstant> 2int </integerConstant>
  <symbol> ( </symbol>
  <identifier> ch </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> n </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> INF </identifier>
  <symbol> , </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> INF </identifier>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> ) </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1ll </integerConstant>
  <symbol> * </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <identifier> j </identifier>
  <symbol> , </symbol>
  <identifier> l </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> j </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> n </identifier>
  <symbol> ; </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> j </identifier>
  <symbol> ] </symbol>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ) </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> min </identifier>
  <symbol> ( </symbol>
  <integerConstant> 1ll </integerConstant>
  <symbol> * </symbol>
  <identifier> i </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> - </symbol>
  <identifier> j </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> r </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> false </keyword>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <identifier> r </identifier>
  <symbol> &lt; </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> l </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> , </symbol>
  <identifier> r </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ; </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <identifier> m </identifier>
  <symbol> * </symbol>
  <identifier> n </identifier>
  <symbol> - </symbol>
  <identifier> r </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> lc </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> rc </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> / </symbol>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> l </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> l </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> r </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> r </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <identifier> n </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> lc </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> rc </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <identifier> l </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> r </identifier>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> res </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> sr </identifier>
  <symbol> [ </symbol>
  <identifier> l </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> res </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> [ </symbol>
  <symbol> ( </symbol>
  <identifier> rc </identifier>
  <symbol> - </symbol>
  <identifier> lc </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <identifier> % </identifier>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <identifier> multi </identifier>
  <symbol> ( </symbol>
  <identifier> res </identifier>
  <symbol> , </symbol>
  <identifier> sl </identifier>
  <symbol> [ </symbol>
  <identifier> r </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> res </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <identifier> flag </identifier>
  <symbol> = </symbol>
  <keyword> true </keyword>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> flag </identifier>
  <symbol> ) </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: YES\n </stringConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> else </keyword>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: NO\n </stringConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> fclose </identifier>
  <symbol> ( </symbol>
  <identifier> stdin </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> fclose </identifier>
  <symbol> ( </symbol>
  <identifier> stdout </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
