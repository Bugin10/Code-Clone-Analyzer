<tokens>
  <identifier> #ifdef </identifier>
  <identifier> _MSC_VER </identifier>
  <identifier> #define </identifier>
  <identifier> _CRT_SECURE_NO_WARNINGS </identifier>
  <identifier> #endif </identifier>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdlib </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cmath </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> set </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> map </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> list </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> queue </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> deque </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iterator </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cassert </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> unsigned </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> llong </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> long </identifier>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <identifier> ldouble </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> pint </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> pair </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> , </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> pdouble </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> int </keyword>
  <symbol> &gt; </symbol>
  <identifier> vint </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vint::iterator </identifier>
  <identifier> vit </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <keyword> do </keyword>
  <identifier> uble </identifier>
  <symbol> &gt; </symbol>
  <identifier> vdouble </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vdouble::iterator </identifier>
  <identifier> vdit </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> ldouble </identifier>
  <symbol> &gt; </symbol>
  <identifier> vldouble </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> vstring </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> llong </identifier>
  <symbol> &gt; </symbol>
  <identifier> vllong </identifier>
  <symbol> ; </symbol>
  <identifier> typedef </identifier>
  <identifier> vector </identifier>
  <symbol> &lt; </symbol>
  <identifier> vint </identifier>
  <symbol> &gt; </symbol>
  <identifier> graph </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> FOR </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> , </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> v </identifier>
  <symbol> = </symbol>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <identifier> v </identifier>
  <symbol> &lt; </symbol>
  <symbol> = </symbol>
  <identifier> k </identifier>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> FORD </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> , </symbol>
  <identifier> p </identifier>
  <symbol> , </symbol>
  <identifier> k </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> v </identifier>
  <symbol> = </symbol>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <identifier> v </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <identifier> k </identifier>
  <symbol> ; </symbol>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> REP </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> i </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> i </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> n </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> #ifdef </identifier>
  <identifier> _MSC_VER </identifier>
  <identifier> #define </identifier>
  <identifier> VAR </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> auto </identifier>
  <identifier> v </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> #else </identifier>
  <identifier> #define </identifier>
  <identifier> VAR </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> __typeof </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> v </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> #endif </identifier>
  <identifier> #define </identifier>
  <identifier> FOREACH </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> VAR </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> i! </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <identifier> i </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> SIZE </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <symbol> ) </symbol>
  <identifier> x </identifier>
  <symbol> . </symbol>
  <identifier> size </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ALL </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <identifier> c </identifier>
  <symbol> . </symbol>
  <identifier> begin </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> . </symbol>
  <identifier> end </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ADD_EDGE </identifier>
  <symbol> ( </symbol>
  <identifier> g </identifier>
  <symbol> , </symbol>
  <identifier> u </identifier>
  <symbol> , </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <identifier> u </identifier>
  <symbol> ] </symbol>
  <symbol> . </symbol>
  <identifier> push_back </identifier>
  <symbol> ( </symbol>
  <identifier> v </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> g </identifier>
  <symbol> [ </symbol>
  <identifier> v </identifier>
  <symbol> ] </symbol>
  <symbol> . </symbol>
  <identifier> push_back </identifier>
  <symbol> ( </symbol>
  <identifier> u </identifier>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> ST </identifier>
  <identifier> first </identifier>
  <identifier> #define </identifier>
  <identifier> ND </identifier>
  <identifier> second </identifier>
  <identifier> #define </identifier>
  <identifier> INF </identifier>
  <integerConstant> 1000000000 </integerConstant>
  <identifier> #define </identifier>
  <identifier> INFL </identifier>
  <integerConstant> 1000000000000000000LL </integerConstant>
  <identifier> #define </identifier>
  <identifier> EPS </identifier>
  <integerConstant> 1e </integerConstant>
  <symbol> - </symbol>
  <integerConstant> 5 </integerConstant>
  <keyword> int </keyword>
  <identifier> V </identifier>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> { </symbol>
  <symbol> { </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> } </symbol>
  <symbol> , </symbol>
  <symbol> { </symbol>
  <integerConstant> 4 </integerConstant>
  <symbol> , </symbol>
  <integerConstant> 3 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> } </symbol>
  <symbol> } </symbol>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> value </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> X </identifier>
  <symbol> , </symbol>
  <keyword> char </keyword>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> Y </identifier>
  <symbol> = </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> i </identifier>
  <symbol> &apos; </symbol>
  <identifier> ? </identifier>
  <integerConstant> 1 </integerConstant>
  <identifier> : </identifier>
  <symbol> ( </symbol>
  <identifier> c </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> j </identifier>
  <symbol> &apos; </symbol>
  <identifier> ? </identifier>
  <integerConstant> 2 </integerConstant>
  <identifier> : </identifier>
  <integerConstant> 3 </integerConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> return </keyword>
  <identifier> X </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <identifier> ? </identifier>
  <identifier> V </identifier>
  <symbol> [ </symbol>
  <identifier> X </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> Y </identifier>
  <symbol> ] </symbol>
  <identifier> : </identifier>
  <symbol> - </symbol>
  <identifier> V </identifier>
  <symbol> [ </symbol>
  <symbol> - </symbol>
  <identifier> X </identifier>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ] </symbol>
  <symbol> [ </symbol>
  <identifier> Y </identifier>
  <symbol> ] </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> bool </identifier>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <identifier> const </identifier>
  <identifier> string </identifier>
  <symbol> &amp; </symbol>
  <identifier> W </identifier>
  <symbol> , </symbol>
  <keyword> int </keyword>
  <identifier> L </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <integerConstant> 2 </integerConstant>
  <symbol> , </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <identifier> REP </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> SIZE </identifier>
  <symbol> ( </symbol>
  <identifier> W </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <identifier> value </identifier>
  <symbol> ( </symbol>
  <identifier> q </identifier>
  <symbol> , </symbol>
  <identifier> W </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <identifier> q </identifier>
  <symbol> ) </symbol>
  <identifier> a </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> , </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> eturn </identifier>
  <identifier> a </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 5 </integerConstant>
  <symbol> &amp; </symbol>
  <symbol> &amp; </symbol>
  <identifier> q </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> in </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> T </identifier>
  <symbol> ; </symbol>
  <identifier> REP </identifier>
  <symbol> ( </symbol>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> L </identifier>
  <symbol> ; </symbol>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> X </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> word </identifier>
  <symbol> = </symbol>
  <stringConstant>  </stringConstant>
  <symbol> , </symbol>
  <identifier> W </identifier>
  <symbol> ; </symbol>
  <identifier> in </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> L </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> X </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> W </identifier>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> X </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <integerConstant> 12 </integerConstant>
  <symbol> ) </symbol>
  <identifier> X </identifier>
  <symbol> = </symbol>
  <identifier> X </identifier>
  <identifier> % </identifier>
  <integerConstant> 4LL </integerConstant>
  <symbol> + </symbol>
  <integerConstant> 12LL </integerConstant>
  <symbol> ; </symbol>
  <identifier> REP </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <identifier> X </identifier>
  <symbol> ) </symbol>
  <identifier> word </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> W </identifier>
  <symbol> ; </symbol>
  <identifier> rintf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %s\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> solve </identifier>
  <symbol> ( </symbol>
  <identifier> word </identifier>
  <symbol> , </symbol>
  <identifier> L </identifier>
  <symbol> ) </symbol>
  <identifier> ? </identifier>
  <stringConstant> YES </stringConstant>
  <identifier> : </identifier>
  <stringConstant> NO </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> eturn </identifier>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
