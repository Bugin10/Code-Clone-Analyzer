<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cmath </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdio </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstdlib </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> cstring </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> sstream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> map </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> set </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> queue </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> vector </identifier>
  <symbol> &gt; </symbol>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> FOR </identifier>
  <symbol> ( </symbol>
  <identifier> prom </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> prom </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> &lt; </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> + </symbol>
  <symbol> + </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> FORD </identifier>
  <symbol> ( </symbol>
  <identifier> prom </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> prom </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> &gt; </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> FORDE </identifier>
  <symbol> ( </symbol>
  <identifier> prom </identifier>
  <symbol> , </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <keyword> int </keyword>
  <identifier> prom </identifier>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> &gt; </symbol>
  <symbol> = </symbol>
  <symbol> ( </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> prom </identifier>
  <symbol> - </symbol>
  <symbol> - </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> DRI </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> DRII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> DRIII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> DRIIII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <keyword> int </keyword>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <identifier> d </identifier>
  <symbol> ; </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> RI </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> RII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> RIII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> RIIII </identifier>
  <symbol> ( </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <identifier> scanf </identifier>
  <symbol> ( </symbol>
  <stringConstant> %d %d %d %d  </stringConstant>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> a </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> b </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> c </identifier>
  <symbol> , </symbol>
  <symbol> &amp; </symbol>
  <identifier> d </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> #define </identifier>
  <identifier> PB </identifier>
  <identifier> push_back </identifier>
  <identifier> #define </identifier>
  <identifier> MP </identifier>
  <identifier> make_pair </identifier>
  <identifier> #define </identifier>
  <identifier> ll </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> #define </identifier>
  <identifier> ull </identifier>
  <identifier> unsigned </identifier>
  <identifier> long </identifier>
  <identifier> long </identifier>
  <identifier> #define </identifier>
  <identifier> MM </identifier>
  <symbol> ( </symbol>
  <identifier> co </identifier>
  <symbol> , </symbol>
  <identifier> cim </identifier>
  <symbol> ) </symbol>
  <identifier> memset </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> co </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <symbol> ( </symbol>
  <identifier> cim </identifier>
  <symbol> ) </symbol>
  <symbol> , </symbol>
  <identifier> sizeof </identifier>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> co </identifier>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <identifier> #define </identifier>
  <identifier> DEB </identifier>
  <symbol> ( </symbol>
  <identifier> x </identifier>
  <symbol> ) </symbol>
  <identifier> cerr </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant> &gt;&gt;&gt;  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> #x </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <stringConstant>  :  </stringConstant>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> x </identifier>
  <symbol> &lt; </symbol>
  <symbol> &lt; </symbol>
  <identifier> endl </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> DRI </identifier>
  <symbol> ( </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> FOR </identifier>
  <symbol> ( </symbol>
  <identifier> t </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> T </identifier>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> req </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> sum </identifier>
  <symbol> = </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <identifier> DRI </identifier>
  <symbol> ( </symbol>
  <identifier> Smax </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <identifier> cin </identifier>
  <symbol> &gt; </symbol>
  <symbol> &gt; </symbol>
  <identifier> s </identifier>
  <symbol> ; </symbol>
  <identifier> FOR </identifier>
  <symbol> ( </symbol>
  <identifier> i </identifier>
  <symbol> , </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> , </symbol>
  <identifier> Smax </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> int </keyword>
  <identifier> p </identifier>
  <symbol> = </symbol>
  <identifier> s </identifier>
  <symbol> [ </symbol>
  <identifier> i </identifier>
  <symbol> ] </symbol>
  <symbol> - </symbol>
  <symbol> &apos; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> &apos; </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> p </identifier>
  <symbol> &gt; </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> req </identifier>
  <symbol> = </symbol>
  <identifier> max </identifier>
  <symbol> ( </symbol>
  <identifier> req </identifier>
  <symbol> , </symbol>
  <identifier> i </identifier>
  <symbol> - </symbol>
  <identifier> sum </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> sum </identifier>
  <symbol> + </symbol>
  <symbol> = </symbol>
  <identifier> p </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> printf </identifier>
  <symbol> ( </symbol>
  <stringConstant> Case #%d: %d\n </stringConstant>
  <symbol> , </symbol>
  <identifier> t </identifier>
  <symbol> + </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> , </symbol>
  <identifier> req </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> return </keyword>
  <integerConstant> 0 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
</tokens>
