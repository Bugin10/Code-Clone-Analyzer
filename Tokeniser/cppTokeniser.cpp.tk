<tokens>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> iostream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> fstream </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> string </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> bitset </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <symbol> &lt; </symbol>
  <identifier> algorithm </identifier>
  <symbol> &gt; </symbol>
  <identifier> #include </identifier>
  <stringConstant> Tokens.h&quot; </stringConstant>
  <identifier> #include </identifier>
  <stringConstant> myxml.h&quot; </stringConstant>
  <identifier> #include </identifier>
  <stringConstant> Tokenfinder.h&quot; </stringConstant>
  <identifier> using </identifier>
  <identifier> namespace </identifier>
  <identifier> std </identifier>
  <symbol> ; </symbol>
  <keyword> int </keyword>
  <identifier> main </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> string </identifier>
  <identifier> temptoken </identifier>
  <symbol> ; </symbol>
  <identifier> string </identifier>
  <identifier> tokentype </identifier>
  <symbol> ; </symbol>
  <identifier> myxml </identifier>
  <identifier> xmlbuilder </identifier>
  <symbol> ; </symbol>
  <identifier> Tokens </identifier>
  <identifier> tokens </identifier>
  <symbol> ; </symbol>
  <identifier> Tokenfinder </identifier>
  <identifier> tokengetter </identifier>
  <symbol> ; </symbol>
  <identifier> xmlbuilder </identifier>
  <symbol> . </symbol>
  <identifier> addnode </identifier>
  <symbol> ( </symbol>
  <stringConstant> tokens </stringConstant>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> for </identifier>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> = </symbol>
  <identifier> tokengetter </identifier>
  <symbol> . </symbol>
  <identifier> getNextToken </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> temptoken </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <stringConstant> NULL </stringConstant>
  <symbol> ; </symbol>
  <identifier> temptoken </identifier>
  <symbol> = </symbol>
  <identifier> tokengetter </identifier>
  <symbol> . </symbol>
  <identifier> getNextToken </identifier>
  <symbol> ( </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <identifier> \r </identifier>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <identifier> or </identifier>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
  <symbol> &apos; </symbol>
  <symbol> ) </symbol>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> continue </identifier>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <symbol> { </symbol>
  <symbol> } </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <stringConstant> error </stringConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> return </keyword>
  <symbol> - </symbol>
  <integerConstant> 1 </integerConstant>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <identifier> tokentype </identifier>
  <symbol> = </symbol>
  <identifier> tokens </identifier>
  <symbol> . </symbol>
  <identifier> find </identifier>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> tokentype </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <stringConstant> NULL </stringConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <identifier> xmlbuilder </identifier>
  <symbol> . </symbol>
  <identifier> addnode </identifier>
  <symbol> ( </symbol>
  <identifier> tokentype </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> xmlbuilder </identifier>
  <symbol> . </symbol>
  <identifier> addcontent </identifier>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <identifier> xmlbuilder </identifier>
  <symbol> . </symbol>
  <identifier> closenode </identifier>
  <symbol> ( </symbol>
  <identifier> tokentype </identifier>
  <symbol> ) </symbol>
  <symbol> ; </symbol>
  <symbol> } </symbol>
  <keyword> else </keyword>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <identifier> ! </identifier>
  <symbol> = </symbol>
  <stringConstant> Empty </stringConstant>
  <symbol> ) </symbol>
  <symbol> { </symbol>
  <keyword> if </keyword>
  <symbol> ( </symbol>
  <symbol> ( </symbol>
  <identifier> temptoken </identifier>
  <symbol> [ </symbol>
  <integerConstant> 0 </integerConstant>
  <symbol> ] </symbol>
  <symbol> = </symbol>
  <symbol> = </symbol>
  <symbol> &apos; </symbol>
</tokens>
